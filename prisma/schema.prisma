// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  simpleId          String?              @unique
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  image             String?
  role              String              @default("USER")
  tier              String              @default("FREE")
  tokens            Int                 @default(30)
  hashedPassword    String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Account           Account[]
  Issue             Issue[]
  Comment           Comment[]
  PotencialQuestion PotencialQuestion[]
  Question          Question[]
  Paper             Paper[]
}

model Issue {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  simpleId    String    @unique
  title       String
  description String
  status      String    @default("OPEN")
  flag        String    @default("NONE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String    @db.ObjectId
  comments    Comment[]
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  simpleId    String   @unique
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  issue       Issue    @relation(fields: [issueId], references: [id])
  issueId     String   @db.ObjectId
}

model PotencialQuestion {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  simpleId        String   @unique
  title           String
  description     String
  file_url        String
  subject         String
  level           String
  exam_board      String
  topic           String
  difficulty      Int
  number_of_marks Int
  mark_scheme_url String
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation(fields: [createdById], references: [id])
  createdById     String   @db.ObjectId
}

model Question {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  simpleId        String   @unique
  title           String
  description     String
  file_url        String
  subject         String
  level           String
  exam_board      String
  topic           String
  difficulty      Int
  number_of_marks Int
  mark_scheme_url String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation(fields: [createdById], references: [id])
  createdById     String   @db.ObjectId
}

model Paper {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  simpleId        String   @unique
  title           String
  description     String
  file_url        String
  number_of_marks Int
  mark_scheme_url String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       User     @relation(fields: [createdById], references: [id])
  createdById     String   @db.ObjectId
}
